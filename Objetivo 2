# Crear un grafo dirigido con las líneas de transporte público y las estaciones
G = {
    'A': {'B': 5, 'C': 3},
    'B': {'D': 2},
    'C': {'E': 4},
    'D': {'F': 6},
    'E': {'F': 1},
    'F': {}
}

# Encontrar la ruta más corta entre dos estaciones utilizando el algoritmo de Dijkstra
start = 'A'
end = 'F'
distances = {node: float('inf') for node in G}
distances[start] = 0
visited = set()
path = {}

while len(visited) < len(G):
    current_node = min((set(distances.keys()) - visited), key=distances.get)
    visited.add(current_node)
    for neighbor, distance in G[current_node].items():
        if distances[current_node] + distance < distances[neighbor]:
            distances[neighbor] = distances[current_node] + distance
            path[neighbor] = current_node

# Construir la ruta más corta
shortest_path = [end]
current_node = end
while current_node != start:
    current_node = path[current_node]
    shortest_path.append(current_node)
shortest_path.reverse()

# Imprimir la ruta más corta
print("La ruta más corta entre {} y {} es: {}".format(start, end, shortest_path))
